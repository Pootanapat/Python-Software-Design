import firebase_admin
from firebase_admin import credentials, firestore
import requests


def connect_firebase_with_config():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡∏î‡πâ‡∏ß‡∏¢ Firebase Config"""
    try:
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Firebase (‡∏à‡∏≤‡∏Å Firebase Console -> Project settings)
        firebase_config = {
            "apiKey": "your_api_key",
            "authDomain": "your_project_id.firebaseapp.com",
            "projectId": "your_project_id",
            "storageBucket": "your_project_id.appspot.com",
            "messagingSenderId": "your_sender_id",
            "appId": "your_app_id"
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á credential ‡∏à‡∏≤‡∏Å config
        cred = credentials.Certificate({
            "project_id": firebase_config["projectId"],
            "private_key": "‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Client SDK",
            "client_email": "‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Client SDK",
            "token_uri": "https://oauth2.googleapis.com/token",
        })
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ OAuth2 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
        from firebase_admin import auth
        import google.auth.transport.requests
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase
        firebase_admin.initialize_app(cred, {
            'projectId': firebase_config['projectId']
        })
        
        db = firestore.client()
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡∏î‡πâ‡∏ß‡∏¢ Firebase Config ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
        return db

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}")
        return None

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
if __name__ == "__main__":
    db = connect_firebase_with_config()

    if db:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô collection
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
        try:
            # ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• collections (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏ô‡πÉ‡∏à‡∏ú‡∏•)
            collections = db.collections()
            for collection in collections:
                print(f"‡∏û‡∏ö Collection: {collection.id}")
            print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô")
        except Exception as e:
            print(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
    else:
        print("‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
              
    import requests

class FarmManagerREST:
    def __init__(self, firebase_config):
        self.api_key = firebase_config["apiKey"]
        self.project_id = firebase_config["projectId"]
        self.base_url = f"https://firestore.googleapis.com/v1/projects/{self.project_id}/databases/(default)/documents"

    def create_farm(self, farm_id, data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÉ‡∏´‡∏°‡πà"""
        url = f"{self.base_url}/farms/{farm_id}?key={self.api_key}"
        payload = {"fields": self._convert_data(data)}
        response = requests.patch(url, json=payload)
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°:", response.json())

    def get_farm(self, farm_id):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°"""
        url = f"{self.base_url}/farms/{farm_id}?key={self.api_key}"
        response = requests.get(url)
        print("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°:", response.json())
        return response.json()

    def add_member(self, farm_id, member_name):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ü‡∏≤‡∏£‡πå‡∏°"""
        farm = self.get_farm(farm_id)
        members = [m["stringValue"] for m in farm["fields"].get("members", {}).get("arrayValue", {}).get("values", [])]

        members.append(member_name)
        url = f"{self.base_url}/farms/{farm_id}?key={self.api_key}"
        payload = {"fields": {"members": {"arrayValue": {"values": [{"stringValue": m} for m in members]}}}}
        response = requests.patch(url, json=payload)
        print(f"üë§ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å {member_name}:", response.json())

    def _convert_data(self, data):
        """‡πÅ‡∏õ‡∏•‡∏á dict Python ‚Üí Firestore REST API format"""
        fields = {}
        for k, v in data.items():
            if isinstance(v, str):
                fields[k] = {"stringValue": v}
            elif isinstance(v, int):
                fields[k] = {"integerValue": str(v)}
            elif isinstance(v, list):
                fields[k] = {"arrayValue": {"values": [{"stringValue": i} for i in v]}}
        return fields


if __name__ == "__main__":
    firebase_config = {
        "apiKey": "YOUR_API_KEY",
        "projectId": "YOUR_PROJECT_ID",
    }

    farm = FarmManagerREST(firebase_config)

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÉ‡∏´‡∏°‡πà
    farm.create_farm("farm1", {"name": "Mini Farm", "members": ["Alice"]})

    # üë§ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    farm.add_member("farm1", "Bob")

    # üìå ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°
    farm.get_farm("farm1")
