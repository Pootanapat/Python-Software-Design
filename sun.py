import firebase_admin
from firebase_admin import credentials, firestore
import json

def connect_firebase():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡πÇ‡∏î‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå service account ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß"""
    try:
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• service account
        service_account_info = {
            "type": "service_account",
            "project_id": "my-small-farm-system",
            "private_key_id": "your_actual_private_key_id",
            "private_key": "-----BEGIN PRIVATE KEY-----\nYOUR_ACTUAL_PRIVATE_KEY\n-----END PRIVATE KEY-----\n",
            "client_email": "firebase-adminsdk-xxxxx@my-small-farm-system.iam.gserviceaccount.com",
            "client_id": "your_actual_client_id",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-xxxxx%40my-small-farm-system.iam.gserviceaccount.com"
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå service account ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        with open('temp_service_account.json', 'w') as f:
            json.dump(service_account_info, f)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏≠‡∏õ Firebase ‡∏ñ‡∏π‡∏Å initialize ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if not firebase_admin._apps:
            cred = credentials.Certificate('temp_service_account.json')
            firebase_admin.initialize_app(cred)
        
        db = firestore.client()
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (optional)
        import os
        os.remove('temp_service_account.json')
        
        return db

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}")
        return None

import firebase_admin
from firebase_admin import credentials, firestore
from typing import List, Dict, Optional
import os
import json

def connect_firebase():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå JSON ‡πÅ‡∏¢‡∏Å"""
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏≠‡∏õ Firebase ‡∏ñ‡∏π‡∏Å initialize ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if not firebase_admin._apps:
            # ‡πÉ‡∏ä‡πâ environment variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤
            # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ environment variables ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            firebase_config = {
                "type": os.environ.get("FIREBASE_TYPE", "service_account"),
                "project_id": os.environ.get("FIREBASE_PROJECT_ID", "my-small-farm-system"),
                "private_key_id": os.environ.get("FIREBASE_PRIVATE_KEY_ID", "your_private_key_id_here"),
                "private_key": os.environ.get("FIREBASE_PRIVATE_KEY", "").replace('\\n', '\n'),
                "client_email": os.environ.get("FIREBASE_CLIENT_EMAIL", "firebase-adminsdk@my-small-farm-system.iam.gserviceaccount.com"),
                "client_id": os.environ.get("FIREBASE_CLIENT_ID", "your_client_id_here"),
                "auth_uri": os.environ.get("FIREBASE_AUTH_URI", "https://accounts.google.com/o/oauth2/auth"),
                "token_uri": os.environ.get("FIREBASE_TOKEN_URI", "https://oauth2.googleapis.com/token"),
                "auth_provider_x509_cert_url": os.environ.get("FIREBASE_AUTH_PROVIDER_CERT_URL", "https://www.googleapis.com/oauth2/v1/certs"),
                "client_x509_cert_url": os.environ.get("FIREBASE_CLIENT_CERT_URL", "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk%40my-small-farm-system.iam.gserviceaccount.com")
            }
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ private key ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not firebase_config["private_key"]:
                print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö private key, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Firebase Emulator...")
                try:
                    # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Firebase Emulator (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤)
                    os.environ["FIRESTORE_EMULATOR_HOST"] = "localhost:8080"
                    cred = credentials.ApplicationDefault()
                    firebase_admin.initialize_app(cred, {
                        'projectId': firebase_config['project_id']
                    })
                except Exception as emulator_error:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Emulator: {emulator_error}")
                    return None
            else:
                # ‡πÉ‡∏ä‡πâ credentials ‡∏à‡∏≤‡∏Å config
                cred = credentials.Certificate(firebase_config)
                firebase_admin.initialize_app(cred)
        
        db = firestore.client()
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
        return db

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}")
        print("‚ö†Ô∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á (Simulation Mode)...")
        return None

class FarmManager:
    def __init__(self, db):
        self.db = db
        self.current_farm_id = None
        self.simulation_mode = db is None
        
        if self.simulation_mode:
            print("üî∂ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á (Simulation Mode)")
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            self.mock_farms = {
                "farm001": {
                    "name": "‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏ß‡∏ô‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏≠‡∏∏‡πÄ‡∏• (‡∏à‡∏≥‡∏•‡∏≠‡∏á)",
                    "owner": "user001",
                    "description": "‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ú‡∏•‡πÑ‡∏°‡πâ organic ‡πÅ‡∏ö‡∏ö‡∏û‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á",
                    "location": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
                    "members": [
                        {"id": "user001", "name": "‡∏™‡∏°‡∏ä‡∏≤‡∏¢", "role": "owner"},
                        {"id": "user002", "name": "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á", "role": "manager"}
                    ],
                    "created_at": "2023-01-01T00:00:00",
                    "updated_at": "2023-01-01T00:00:00"
                }
            }

    def create_farm(self, farm_id: str, data: Dict):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÉ‡∏´‡∏°‡πà"""
        if self.simulation_mode:
            # ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
            if farm_id in self.mock_farms:
                print("‚ùå ‡∏°‡∏µ‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
                return False
            
            self.mock_farms[farm_id] = data
            self.mock_farms[farm_id]['created_at'] = "2023-01-01T00:00:00"
            self.mock_farms[farm_id]['updated_at'] = "2023-01-01T00:00:00"
            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
            return True
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if self.db.collection('farms').document(farm_id).get().exists:
                print("‚ùå ‡∏°‡∏µ‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
                return False
            
            doc_ref = self.db.collection('farms').document(farm_id)
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå created_at ‡πÅ‡∏•‡∏∞ updated_at
            data['created_at'] = firestore.SERVER_TIMESTAMP
            data['updated_at'] = firestore.SERVER_TIMESTAMP
            doc_ref.set(data)
            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        except Exception as e:
            print(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            return False

    def get_farm(self, farm_id: str) -> Optional[Dict]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°"""
        if self.simulation_mode:
            # ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
            if farm_id in self.mock_farms:
                farm_data = self.mock_farms[farm_id]
                print("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏° (‡∏à‡∏≥‡∏•‡∏≠‡∏á):", farm_data)
                return farm_data
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
                return None
        
        try:
            doc_ref = self.db.collection('farms').document(farm_id)
            doc = doc_ref.get()
            if doc.exists:
                farm_data = doc.to_dict()
                print("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°:", farm_data)
                return farm_data
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ")
                return None
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÑ‡∏î‡πâ: {e}")
            return None

    def update_farm(self, farm_id: str, update_data: Dict):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°"""
        if self.simulation_mode:
            # ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
            if farm_id not in self.mock_farms:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
                return False
            
            self.mock_farms[farm_id].update(update_data)
            self.mock_farms[farm_id]['updated_at'] = "2023-01-01T00:00:00"
            print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
            return True
        
        try:
            doc_ref = self.db.collection('farms').document(farm_id)
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå updated_at
            update_data['updated_at'] = firestore.SERVER_TIMESTAMP
            doc_ref.update(update_data)
            print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        except Exception as e:
            print(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            return False

    def delete_farm(self, farm_id: str):
        """‡∏•‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°"""
        if self.simulation_mode:
            # ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
            if farm_id not in self.mock_farms:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
                return False
            
            del self.mock_farms[farm_id]
            print("‚úÖ ‡∏•‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
            return True
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö (‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å owner)
            doc_ref = self.db.collection('farms').document(farm_id)
            doc = doc_ref.get()
            
            if not doc.exists:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ")
                return False
                
            # ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            doc_ref.delete()
            print("‚úÖ ‡∏•‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        except Exception as e:
            print(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            return False

    def add_member(self, farm_id: str, member_data: Dict):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ü‡∏≤‡∏£‡πå‡∏°"""
        if self.simulation_mode:
            # ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
            if farm_id not in self.mock_farms:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
                return False
            
            if 'members' not in self.mock_farms[farm_id]:
                self.mock_farms[farm_id]['members'] = []
            
            self.mock_farms[farm_id]['members'].append(member_data)
            print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å {member_data.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
            return True
        
        try:
            doc_ref = self.db.collection('farms').document(farm_id)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            if not doc_ref.get().exists:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ")
                return False
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
            doc_ref.update({
                'members': firestore.ArrayUnion([member_data]),
                'updated_at': firestore.SERVER_TIMESTAMP
            })
            print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å {member_data.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        except Exception as e:
            print(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            return False

    def remove_member(self, farm_id: str, member_id: str):
        """‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏≤‡∏£‡πå‡∏°"""
        if self.simulation_mode:
            # ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
            if farm_id not in self.mock_farms:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
                return False
                
            if 'members' not in self.mock_farms[farm_id]:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
                return False
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡∏≤‡∏° member_id
            self.mock_farms[farm_id]['members'] = [
                m for m in self.mock_farms[farm_id]['members'] if m.get('id') != member_id
            ]
            
            print(f"‚úÖ ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ID {member_id} ‡∏≠‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
            return True
        
        try:
            doc_ref = self.db.collection('farms').document(farm_id)
            doc = doc_ref.get()
            
            if not doc.exists:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ")
                return False
                
            farm_data = doc.to_dict()
            members = farm_data.get('members', [])
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡∏≤‡∏° member_id
            updated_members = [m for m in members if m.get('id') != member_id]
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°
            doc_ref.update({
                'members': updated_members,
                'updated_at': firestore.SERVER_TIMESTAMP
            })
            
            print(f"‚úÖ ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ID {member_id} ‡∏≠‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        except Exception as e:
            print(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            return False

    def get_user_farms(self, user_id: str) -> List[Dict]:
        """‡∏î‡∏∂‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà user ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á"""
        if self.simulation_mode:
            # ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
            user_farms = []
            for farm_id, farm_data in self.mock_farms.items():
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                if farm_data.get('owner') == user_id:
                    farm_data_copy = farm_data.copy()
                    farm_data_copy['id'] = farm_id
                    user_farms.append(farm_data_copy)
                else:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                    for member in farm_data.get('members', []):
                        if member.get('id') == user_id:
                            farm_data_copy = farm_data.copy()
                            farm_data_copy['id'] = farm_id
                            user_farms.append(farm_data_copy)
                            break
            
            print(f"‚úÖ ‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(user_farms)} ‡∏ü‡∏≤‡∏£‡πå‡∏° (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
            return user_farms
        
        try:
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà user ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            farms_ref = self.db.collection('farms')
            query = farms_ref.where('members', 'array_contains', {'id': user_id})
            
            results = query.stream()
            user_farms = []
            
            for doc in results:
                farm_data = doc.to_dict()
                farm_data['id'] = doc.id
                user_farms.append(farm_data)
            
            print(f"‚úÖ ‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(user_farms)} ‡∏ü‡∏≤‡∏£‡πå‡∏°")
            return user_farms
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: {e}")
            return []

    def set_current_farm(self, farm_id: str):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        if self.simulation_mode:
            # ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
            if farm_id in self.mock_farms:
                self.current_farm_id = farm_id
                print(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô: {farm_id} (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
                return True
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
                return False
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            doc_ref = self.db.collection('farms').document(farm_id)
            if doc_ref.get().exists:
                self.current_farm_id = farm_id
                print(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô: {farm_id}")
                return True
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ")
                return False
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≤‡∏£‡πå‡∏°: {e}")
            return False

    def get_current_farm(self) -> Optional[Dict]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        if not self.current_farm_id:
            print("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏≤‡∏£‡πå‡∏°")
            return None
        
        return self.get_farm(self.current_farm_id)

    def list_all_farms(self) -> List[Dict]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö)"""
        if self.simulation_mode:
            # ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
            all_farms = []
            for farm_id, farm_data in self.mock_farms.items():
                farm_data_copy = farm_data.copy()
                farm_data_copy['id'] = farm_id
                all_farms.append(farm_data_copy)
            
            print(f"‚úÖ ‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(all_farms)} ‡∏ü‡∏≤‡∏£‡πå‡∏° (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
            return all_farms
        
        try:
            farms_ref = self.db.collection('farms')
            docs = farms_ref.stream()
            
            all_farms = []
            for doc in docs:
                farm_data = doc.to_dict()
                farm_data['id'] = doc.id
                all_farms.append(farm_data)
            
            print(f"‚úÖ ‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(all_farms)} ‡∏ü‡∏≤‡∏£‡πå‡∏°")
            return all_farms
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ: {e}")
            return []


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
def test_farm_system():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≤‡∏£‡πå‡∏°"""
    db = connect_firebase()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á FarmManager (‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡πÑ‡∏î‡πâ)
    farm_manager = FarmManager(db)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÉ‡∏´‡∏°‡πà
    farm_data = {
        "name": "‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏ß‡∏ô‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏≠‡∏∏‡πÄ‡∏•",
        "owner": "user001",
        "description": "‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ú‡∏•‡πÑ‡∏°‡πâ organic ‡πÅ‡∏ö‡∏ö‡∏û‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á",
        "location": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
        "members": [
            {"id": "user001", "name": "‡∏™‡∏°‡∏ä‡∏≤‡∏¢", "role": "owner"},
            {"id": "user002", "name": "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á", "role": "manager"}
        ]
    }
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°
    if farm_manager.create_farm("farm001", farm_data):
        print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°
    farm_info = farm_manager.get_farm("farm001")
    if farm_info:
        print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
    new_member = {"id": "user003", "name": "‡∏™‡∏°‡∏ô‡∏∂‡∏Å", "role": "worker"}
    if farm_manager.add_member("farm001", new_member):
        print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    if farm_manager.set_current_farm("farm001"):
        print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # ‡∏î‡∏∂‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current_farm = farm_manager.get_current_farm()
    if current_farm:
        print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # ‡∏î‡∏∂‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user
    user_farms = farm_manager.get_user_farms("user001")
    if user_farms:
        print(f"‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(user_farms)} ‡∏ü‡∏≤‡∏£‡πå‡∏°")
    
    # ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    if farm_manager.remove_member("farm001", "user003"):
        print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°
    update_data = {"description": "‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ú‡∏•‡πÑ‡∏°‡πâ organic ‡πÅ‡∏ö‡∏ö‡∏û‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà"}
    if farm_manager.update_farm("farm001", update_data):
        print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    all_farms = farm_manager.list_all_farms()
    print(f"‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(all_farms)} ‡∏ü‡∏≤‡∏£‡πå‡∏°")
    
    # ‡∏•‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏° (‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á)
    if farm_manager.delete_farm("farm001"):
        print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

def demo_farm_management():
    """‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≤‡∏£‡πå‡∏°"""
    db = connect_firebase()
    farm_manager = FarmManager(db)
    
    print("\n" + "="*50)
    print("‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏≠‡∏∏‡πÄ‡∏•")
    print("="*50)
    
    # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    print("\n1. ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÉ‡∏´‡∏°‡πà")
    farm_data = {
        "name": "‡∏™‡∏ß‡∏ô‡∏™‡πâ‡∏°‡∏≠‡∏∏‡πÄ‡∏•",
        "owner": "user123",
        "description": "‡∏™‡∏ß‡∏ô‡∏™‡πâ‡∏° organic ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á",
        "location": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
        "members": [
            {"id": "user123", "name": "‡∏ô‡∏≤‡∏¢‡∏≠‡∏∏‡πÄ‡∏•", "role": "owner"},
            {"id": "user456", "name": "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏™‡∏°‡∏®‡∏£‡∏µ", "role": "manager"}
        ]
    }
    
    farm_manager.create_farm("farm_demo", farm_data)
    
    # 2. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°
    print("\n2. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°")
    farm_info = farm_manager.get_farm("farm_demo")
    if farm_info:
        print(f"‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏≤‡∏£‡πå‡∏°: {farm_info.get('name')}")
        print(f"‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {farm_info.get('description')}")
        print(f"‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á: {farm_info.get('location')}")
        print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: {len(farm_info.get('members', []))}")
    
    # 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
    print("\n3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà")
    new_member = {"id": "user789", "name": "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏´‡∏°‡∏≤‡∏¢", "role": "worker"}
    farm_manager.add_member("farm_demo", new_member)
    
    # 4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    print("\n4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
    farm_manager.set_current_farm("farm_demo")
    current_farm = farm_manager.get_current_farm()
    if current_farm:
        print(f"‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_farm.get('name')}")
    
    # 5. ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    print("\n5. ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    user_farms = farm_manager.get_user_farms("user123")
    for i, farm in enumerate(user_farms, 1):
        print(f"{i}. {farm.get('name')} - {farm.get('location')}")
    
    print("\n‚úÖ ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

if __name__ == "__main__":
    # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
    test_farm_system()
    
    # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï
    demo_farm_management()